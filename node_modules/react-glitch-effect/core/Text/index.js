"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

require("./style.css");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function Text(_ref) {
  var children = _ref.children,
      color1 = _ref.color1,
      color2 = _ref.color2,
      _ref$component = _ref.component,
      component = _ref$component === void 0 ? 'span' : _ref$component,
      _ref$disabled = _ref.disabled,
      disabled = _ref$disabled === void 0 ? false : _ref$disabled,
      duration = _ref.duration,
      iterationCount = _ref.iterationCount,
      _ref$onHover = _ref.onHover,
      onHover = _ref$onHover === void 0 ? false : _ref$onHover,
      onMouseEnter = _ref.onMouseEnter,
      onMouseLeave = _ref.onMouseLeave,
      rest = (0, _objectWithoutProperties2.default)(_ref, ["children", "color1", "color2", "component", "disabled", "duration", "iterationCount", "onHover", "onMouseEnter", "onMouseLeave"]);
  var refTextGlitch = (0, _react.useRef)(null);
  (0, _react.useLayoutEffect)(function () {
    refTextGlitch.current.classList.add('_s-glitch-text-variables');
  }, []);
  (0, _react.useLayoutEffect)(function () {
    initCSSVariables();
  }, [color1, color2, duration, iterationCount]);
  (0, _react.useLayoutEffect)(function () {
    !disabled && !onHover ? addGlitchEffect() : removeGlitchEffect();
  }, [disabled, onHover]);

  var addGlitchEffect = function addGlitchEffect() {
    refTextGlitch.current.classList.add('_s-glitch-text');
  };

  var removeGlitchEffect = function removeGlitchEffect() {
    refTextGlitch.current.classList.remove('_s-glitch-text');
  };

  var initCSSVariables = function initCSSVariables() {
    var style = refTextGlitch.current.style;
    color1 && style.setProperty('--_s-color-text-effect-1', color1);
    color2 && style.setProperty('--_s-color-text-effect-2', color2);
    duration && style.setProperty('_s-duration-text-effect', duration);
    iterationCount && style.setProperty('_s-iteration-text-effect-count', iterationCount);
  };

  var handleOnMouseEnter = function handleOnMouseEnter() {
    onMouseEnter && onMouseEnter();
    onHover && addGlitchEffect();
  };

  var handleOnMouseLeave = function handleOnMouseLeave() {
    onMouseLeave && onMouseLeave();
    onHover && removeGlitchEffect();
  };

  return (0, _react.createElement)(component, _objectSpread({}, rest, {
    ref: refTextGlitch,
    onMouseEnter: handleOnMouseEnter,
    onMouseLeave: handleOnMouseLeave
  }), children);
}

var _default = Text;
exports.default = _default;
Text.propTypes = {
  children: _propTypes.default.node.isRequired,
  color1: _propTypes.default.string,
  color2: _propTypes.default.string,
  component: _propTypes.default.string,
  disabled: _propTypes.default.bool,
  duration: _propTypes.default.string,
  iterationCount: _propTypes.default.string,
  onHover: _propTypes.default.bool
};