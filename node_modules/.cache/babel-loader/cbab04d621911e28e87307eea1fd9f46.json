{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\\\u05E2\\u05D5\\u05DE\\u05E8\\\\Desktop\\\\Extra\\\\React\\\\canabiz\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\\\u05E2\\u05D5\\u05DE\\u05E8\\\\Desktop\\\\Extra\\\\React\\\\canabiz\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\\\u05E2\\u05D5\\u05DE\\u05E8\\\\Desktop\\\\Extra\\\\React\\\\canabiz\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\\\u05E2\\u05D5\\u05DE\\u05E8\\\\Desktop\\\\Extra\\\\React\\\\canabiz\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\\\u05E2\\u05D5\\u05DE\\u05E8\\\\Desktop\\\\Extra\\\\React\\\\canabiz\\\\src\\\\components\\\\Typed.jsx\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"../styles/Typed.css\";\n\nvar Typed = /*#__PURE__*/function (_React$Component) {\n  _inherits(Typed, _React$Component);\n\n  var _super = _createSuper(Typed);\n\n  function Typed() {\n    _classCallCheck(this, Typed);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Typed, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // If you want to pass more options as props, simply add\n      // your desired props to this destructuring assignment.\n      var strings = this.props.strings; // You can pass other options here, such as typing speed, back speed, etc.\n\n      var options = {\n        strings: strings,\n        typeSpeed: 50,\n        backSpeed: 50\n      }; // this.el refers to the <span> in the render() method\n\n      this.typed = new Typed(this.el, options);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      // Make sure to destroy Typed instance on unmounting\n      // to prevent memory leaks\n      this.typed.destroy();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 9\n        }\n      }, \"Typed.js\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"type-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          whiteSpace: \"pre\"\n        },\n        ref: function ref(el) {\n          _this.el = el;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 11\n        }\n      })), /*#__PURE__*/React.createElement(\"button\", {\n        onClick: function onClick() {\n          return _this.typed.toggle();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 9\n        }\n      }, \"Toggle\"), /*#__PURE__*/React.createElement(\"button\", {\n        onClick: function onClick() {\n          return _this.typed.start();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 9\n        }\n      }, \"Start\"), /*#__PURE__*/React.createElement(\"button\", {\n        onClick: function onClick() {\n          return _this.typed.stop();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 9\n        }\n      }, \"Stop\"), /*#__PURE__*/React.createElement(\"button\", {\n        onClick: function onClick() {\n          return _this.typed.reset();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 9\n        }\n      }, \"Reset\"), /*#__PURE__*/React.createElement(\"button\", {\n        onClick: function onClick() {\n          return _this.typed.destroy();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 9\n        }\n      }, \"Destroy\"));\n    }\n  }]);\n\n  return Typed;\n}(React.Component);\n\nReactDOM.render( /*#__PURE__*/React.createElement(Typed, {\n  strings: [\"Some <i>strings</i> are slanted\", \"Some <strong>strings</strong> are bold\", \"HTML characters &times; &copy;\"],\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 3\n  }\n}), document.getElementById(\"react-root\"));","map":{"version":3,"sources":["C:/Users/עומר/Desktop/Extra/React/canabiz/src/components/Typed.jsx"],"names":["React","Component","ReactDOM","Typed","strings","props","options","typeSpeed","backSpeed","typed","el","destroy","whiteSpace","toggle","start","stop","reset","render","document","getElementById"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,qBAAP;;IAEMC,K;;;;;;;;;;;;;wCACgB;AAClB;AACA;AAFkB,UAGVC,OAHU,GAGE,KAAKC,KAHP,CAGVD,OAHU,EAIlB;;AACA,UAAME,OAAO,GAAG;AACdF,QAAAA,OAAO,EAAEA,OADK;AAEdG,QAAAA,SAAS,EAAE,EAFG;AAGdC,QAAAA,SAAS,EAAE;AAHG,OAAhB,CALkB,CAUlB;;AACA,WAAKC,KAAL,GAAa,IAAIN,KAAJ,CAAU,KAAKO,EAAf,EAAmBJ,OAAnB,CAAb;AACD;;;2CAEsB;AACrB;AACA;AACA,WAAKG,KAAL,CAAWE,OAAX;AACD;;;6BAEQ;AAAA;;AACP,0BACE;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AACE,QAAA,KAAK,EAAE;AAAEC,UAAAA,UAAU,EAAE;AAAd,SADT;AAEE,QAAA,GAAG,EAAE,aAACF,EAAD,EAAQ;AACX,UAAA,KAAI,CAACA,EAAL,GAAUA,EAAV;AACD,SAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CAFF,eAUE;AAAQ,QAAA,OAAO,EAAE;AAAA,iBAAM,KAAI,CAACD,KAAL,CAAWI,MAAX,EAAN;AAAA,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAVF,eAWE;AAAQ,QAAA,OAAO,EAAE;AAAA,iBAAM,KAAI,CAACJ,KAAL,CAAWK,KAAX,EAAN;AAAA,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAXF,eAYE;AAAQ,QAAA,OAAO,EAAE;AAAA,iBAAM,KAAI,CAACL,KAAL,CAAWM,IAAX,EAAN;AAAA,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAZF,eAaE;AAAQ,QAAA,OAAO,EAAE;AAAA,iBAAM,KAAI,CAACN,KAAL,CAAWO,KAAX,EAAN;AAAA,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAbF,eAcE;AAAQ,QAAA,OAAO,EAAE;AAAA,iBAAM,KAAI,CAACP,KAAL,CAAWE,OAAX,EAAN;AAAA,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAdF,CADF;AAkBD;;;;EAxCiBX,KAAK,CAACC,S;;AA2C1BC,QAAQ,CAACe,MAAT,eACE,oBAAC,KAAD;AACE,EAAA,OAAO,EAAE,CACP,iCADO,EAEP,wCAFO,EAGP,gCAHO,CADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,EAQEC,QAAQ,CAACC,cAAT,CAAwB,YAAxB,CARF","sourcesContent":["import React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"../styles/Typed.css\";\r\n\r\nclass Typed extends React.Component {\r\n  componentDidMount() {\r\n    // If you want to pass more options as props, simply add\r\n    // your desired props to this destructuring assignment.\r\n    const { strings } = this.props;\r\n    // You can pass other options here, such as typing speed, back speed, etc.\r\n    const options = {\r\n      strings: strings,\r\n      typeSpeed: 50,\r\n      backSpeed: 50,\r\n    };\r\n    // this.el refers to the <span> in the render() method\r\n    this.typed = new Typed(this.el, options);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    // Make sure to destroy Typed instance on unmounting\r\n    // to prevent memory leaks\r\n    this.typed.destroy();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"wrap\">\r\n        <h1>Typed.js</h1>\r\n        <div className=\"type-wrap\">\r\n          <span\r\n            style={{ whiteSpace: \"pre\" }}\r\n            ref={(el) => {\r\n              this.el = el;\r\n            }}\r\n          />\r\n        </div>\r\n        <button onClick={() => this.typed.toggle()}>Toggle</button>\r\n        <button onClick={() => this.typed.start()}>Start</button>\r\n        <button onClick={() => this.typed.stop()}>Stop</button>\r\n        <button onClick={() => this.typed.reset()}>Reset</button>\r\n        <button onClick={() => this.typed.destroy()}>Destroy</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nReactDOM.render(\r\n  <Typed\r\n    strings={[\r\n      \"Some <i>strings</i> are slanted\",\r\n      \"Some <strong>strings</strong> are bold\",\r\n      \"HTML characters &times; &copy;\",\r\n    ]}\r\n  />,\r\n  document.getElementById(\"react-root\")\r\n);\r\n"]},"metadata":{},"sourceType":"module"}